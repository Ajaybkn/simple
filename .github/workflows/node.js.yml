name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4

      # Set up AWS credentials using GitHub Secrets
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # Optional, specify if needed

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Use Node.js ${{ matrix.node-version }} and build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - run: npm ci
      - run: npm run build --if-present

      # Get the last version tag from Git
      - name: Get version tag from Git
        id: version-tag
        run: |
          VERSION=$(git tag --sort=-v:refname | grep -oP 'v\d+' | head -n 1)
          if [ -z "$VERSION" ]; then
            VERSION="v0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Increment version tag for new builds
      - name: Increment version
        id: increment-version
        run: |
          VERSION_NUMBER=${{ env.VERSION//v/ }}
          VERSION_NUMBER=$((VERSION_NUMBER + 1))
          VERSION="v$VERSION_NUMBER"
          echo "New version tag is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Build Docker image
      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: simple
          IMAGE_TAG: ${{ env.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
