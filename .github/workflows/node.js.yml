name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4

      # Set up AWS credentials using GitHub Secrets
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # Optional, specify if needed

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Use Node.js ${{ matrix.node-version }} and build
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - run: npm ci
      - run: npm run build --if-present

      # Build Docker image
      - name: Build Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: simple
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 1: Update ECS Service to Use the New Image
     # - name: Update ECS Service
      #  run: |
       #   aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
         #   --service ${{ secrets.ECS_SERVICE }} \
         #   --force-new-deployment \
         #   --region ${{ secrets.AWS_REGION }} \
          #  --image ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      # Optional: Step 2: Update Route 53 DNS record (if necessary)
      # This step is only needed if you want to automate DNS updates, but usually, this is only necessary for specific configurations.
      # - name: Update Route 53 DNS record
      #   run: |
      #     aws route53 change-resource-record-sets --hosted-zone-id YOUR_HOSTED_ZONE_ID --change-batch '{
      #       "Changes": [
      #         {
      #           "Action": "UPSERT",
      #           "ResourceRecordSet": {
      #             "Name": "myapp.example.com.",
      #             "Type": "A",
      #             "TTL": 60,
      #             "ResourceRecords": [{"Value": "ALB_DNS_NAME"}]
      #           }
      #         }
      #       ]
      #     }'
